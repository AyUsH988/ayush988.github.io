{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customhttp-service.service.ts","webpack:///./src/app/piechart/piechart.component.html","webpack:///./src/app/piechart/piechart.component.scss","webpack:///./src/app/piechart/piechart.component.ts","webpack:///./src/app/status-component/api-config.ts","webpack:///./src/app/status-component/status-component.component.css","webpack:///./src/app/status-component/status-component.component.html","webpack:///./src/app/status-component/status-component.component.ts","webpack:///./src/app/status-component/status-service.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-status-component></app-status-component>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'covid-status';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS, HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';\r\nimport { StatusComponentComponent } from './status-component/status-component.component';\r\nimport { StatusService } from './status-component/status-service.service';\r\nimport { CustomHttpService } from './customhttp-service.service';\r\nimport { AutocompleteLibModule } from 'angular-ng-autocomplete';\r\nimport { FormsModule } from '@angular/forms';\r\n// import { ChartsModule } from 'ng2-charts';\r\n// import 'chartjs-plugin-labels';\r\nimport { PiechartComponent } from './piechart/piechart.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    StatusComponentComponent,\r\n    PiechartComponent\r\n    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    AutocompleteLibModule,\r\n    // ChartsModule\r\n  ],\r\n  providers: [StatusService, CustomHttpService],\r\n  // exports: [ ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { CovidUrl, countries,getStatusByCountry,stateUrl,cityUrl} from '../app/status-component/api-config';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CustomHttpService {\r\n\r\n  constructor(public http: HttpClient) {}\r\n  covidurl = CovidUrl;\r\n  countryUrl = countries;\r\n  getStatusByCountryUrl=getStatusByCountry;\r\n  stateUrl=stateUrl;\r\n  cityUrl = cityUrl\r\n\r\n  getCountrtList() {\r\n    return this.http.get(this.countryUrl);\r\n  }\r\n\r\n  getStatusOfCountry() {\r\n    return this.http.get(this.getStatusByCountryUrl);\r\n  }\r\n\r\n  getStatusOfState() {\r\n    return this.http.get(this.stateUrl);\r\n  }\r\n\r\n  getStatusOfCity() {\r\n    return this.http.get(this.cityUrl);\r\n  }\r\n\r\n\r\n}\r\n","module.exports = \"<!-- <div>\\r\\n  <canvas baseChart style=\\\"cursor: pointer;\\\"\\r\\n      [chartType]=\\\"chartType\\\"\\r\\n      [datasets]=\\\"chartDatasets\\\"\\r\\n      [labels]=\\\"chartLabels\\\"\\r\\n      [options]=\\\"chartOptions\\\"\\r\\n      [legend]=\\\"true\\\"\\r\\n      (chartClick)=\\\"chartClicked($event)\\\">\\r\\n  </canvas>\\r\\n</div> -->\"","module.exports = \"\"","import { Component, Input, OnInit, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\n@Component({\r\n  selector: 'app-piechart',\r\n  templateUrl: './piechart.component.html',\r\n  styleUrls: ['./piechart.component.scss'],\r\n})\r\nexport class PiechartComponent implements OnInit, OnChanges {\r\n\r\n  // @Input() chartData;\r\n  // @Input() chartLabel;\r\n  // chartType: string = 'pie';\r\n  // chartDatasets: any;\r\n  // chartLabels: [];\r\n  // @Output() onClick = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    // this.renderChart()\r\n  }\r\n\r\n  // renderChart() {\r\n  //   this.chartDatasets = [{\r\n  //     data: this.chartData,\r\n  //     borderWidth: 0, //this will hide border\r\n  //   }];\r\n  //   this.chartLabels = this.chartLabel;\r\n  // }\r\n\r\n  // public chartOptions: any = {\r\n  //   responsive: true,\r\n  //   // maintainAspectRatio: true,\r\n  //   borderWidth: 0,\r\n  //   legend: {\r\n  //     segmentShowStroke: false,\r\n  //     display: true,\r\n  //     position: \"bottom\",\r\n  //     labels: {\r\n  //       // fontColor: '#FF3333',\r\n  //       boxWidth: 12,\r\n  //       fontSize: 10,\r\n  //       // usePointStyle: true,\r\n  //       cursor: \"pointer\",\r\n  //     }\r\n  //   },\r\n  //   plugins: {\r\n  //     labels: {\r\n  //       render: 'value',\r\n  //     }\r\n  //   },\r\n  // }\r\n\r\n  // chartClicked(event) {\r\n  //   this.onClick.emit(event);\r\n  // }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // if (changes && changes.chartData && changes.chartData.currentValue) {\r\n    //   this.chartData = changes.chartData.currentValue;\r\n    // this.chartLabel = changes.chartLabel.currentValue;\r\n    // this.renderChart();\r\n    }\r\n  // }\r\n\r\n}\r\n","\r\nconst CovidUrl = 'https://api.covid19api.com/country/south-africa'\r\nconst countries = 'https://api.covid19api.com/summary';\r\nconst getStatusByCountry = 'https://api.covid19api.com/live/country/south-africa';\r\n// const stateUrl='https://api.covid19india.org/data.json'\r\nconst cityUrl='https://api.covid19india.org/state_district_wise.json'\r\nconst stateUrl='https://covid-india-cases.herokuapp.com/states'\r\n\r\n\r\n\r\n\r\nexport { CovidUrl, countries,getStatusByCountry,stateUrl,cityUrl};\r\n","module.exports = \".status-width {\\r\\n    width: 300px;\\r\\n}\\r\\n\\r\\n.cursor {\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.date-font {\\r\\n    font-size: 11px;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"form-container my-3 mx-2 position-relative\\\">\\r\\n    <div class=\\\"d-flex justify-content-center ticket-options-container text-center\\\">\\r\\n      <div class=\\\"col cursor col-md-2 text-center p-2 cursor-pointer badge badge-pill\\\" (click)=\\\"showByType('country')\\\"\\r\\n        [ngClass]=\\\"{'badge-primary' : selectedType == 'country',\\r\\n                      'badge-light' : selectedType != 'country' }\\\">\\r\\n        By Country\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col col-md-2 cursor text-center p-2 cursor-pointer badge badge-pill\\\" (click)=\\\"showByType('state')\\\"\\r\\n        [ngClass]=\\\"{'badge-primary' : selectedType == 'state',\\r\\n                      'badge-light' : selectedType != 'state'}\\\">\\r\\n        By State\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col col-md-2 cursor text-center p-2 cursor-pointer badge badge-pill\\\" (click)=\\\"showByType('city')\\\"\\r\\n        [ngClass]=\\\"{'badge-primary' : selectedType == 'city',\\r\\n                      'badge-light' : selectedType != 'city'}\\\">\\r\\n        By City\\r\\n      </div>\\r\\n    </div>\\r\\n    <section *ngIf=\\\"selectedType == 'country'\\\">\\r\\n      <div class=\\\"h5 text-center text-primary my-4\\\">Get report By Country</div>\\r\\n      <div class=\\\"row my-5\\\">\\r\\n        <div class=\\\"col-4 text-white\\\">\\r\\n          Country\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\" *ngIf=\\\"countriesList\\\">\\r\\n          <ng-autocomplete [data]=\\\"countriesList.Countries\\\" [searchKeyword]=\\\"keyword\\\"\\r\\n            (selected)='selectCustomer($event)' placeholder=\\\"Enter the country\\\" [itemTemplate]=\\\"itemTemplate\\\" name=\\\"\\\"\\r\\n            [notFoundTemplate]=\\\"notFoundTemplate\\\">\\r\\n          </ng-autocomplete>\\r\\n          <ng-template #itemTemplate let-item>\\r\\n            <a [innerHTML]=\\\"item.Country\\\"></a>\\r\\n          </ng-template>\\r\\n\\r\\n          <ng-template #notFoundTemplate let-notFound>\\r\\n            <div [innerHTML]=\\\"notFound\\\"></div>\\r\\n          </ng-template>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngIf=\\\"activeCountryStatus\\\" class=\\\"h5 text-center text-primary my-4\\\">Total Count of Covid-19 in\\r\\n        {{activeCountryStatus.Country}}</div>\\r\\n      <div class=\\\"row my-2\\\" *ngIf=\\\"activeCountryStatus\\\">\\r\\n        <div class=\\\"col text-center card bg-primary text-white p-2 mx-1\\\">\\r\\n          <span>Confirmed </span>\\r\\n          <span>{{activeCountryStatus.TotalConfirmed}}</span>\\r\\n          <span class=\\\"date-font\\\">Last Updated On {{activeCountryStatus.Date | date: 'fullDate'}}</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col text-center card bg-success text-white p-2 mx-1\\\">\\r\\n          <span>Recovered </span>\\r\\n          <span>{{activeCountryStatus.TotalRecovered}}</span>\\r\\n          <span class=\\\"date-font\\\">Last Updated On {{activeCountryStatus.Date | date: 'fullDate'}}</span>\\r\\n        </div>\\r\\n        <div class=\\\"col text-center card bg-danger text-white p-2 mx-1\\\">\\r\\n\\r\\n          <span>Death </span>\\r\\n          <span>{{activeCountryStatus.TotalDeaths}}</span>\\r\\n          <span class=\\\"date-font\\\">Last Updated On {{activeCountryStatus.Date | date: 'fullDate'}}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngIf=\\\"activeCountryStatus\\\" class=\\\"h5 text-center text-primary my-4\\\">Total Count of Covid-19 in\\r\\n        {{activeCountryStatus.Country}} on {{activeCountryStatus.Date | date: 'fullDate'}}</div>\\r\\n      <div class=\\\"row my-2\\\" *ngIf=\\\"activeCountryStatus\\\">\\r\\n        <div class=\\\"col text-center card bg-primary text-white p-2 mx-1\\\">\\r\\n          <span>Confirmed </span>\\r\\n          <span>{{activeCountryStatus.NewConfirmed}}</span>\\r\\n          <span class=\\\"date-font\\\">Last Updated On {{activeCountryStatus.Date | date: 'fullDate'}}</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col text-center card bg-success text-white p-2 mx-1\\\">\\r\\n          <span>Recovered </span>\\r\\n          <span>{{activeCountryStatus.NewRecovered}}</span>\\r\\n          <span class=\\\"date-font\\\">Last Updated On {{activeCountryStatus.Date | date: 'fullDate'}}</span>\\r\\n        </div>\\r\\n        <div class=\\\"col text-center card bg-danger text-white p-2 mx-1\\\">\\r\\n\\r\\n          <span>Death </span>\\r\\n          <span>{{activeCountryStatus.NewDeaths}}</span>\\r\\n          <span class=\\\"date-font\\\">Last Updated On {{activeCountryStatus.Date | date: 'fullDate'}}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </section>\\r\\n\\r\\n    <section *ngIf=\\\"selectedType == 'state'\\\">\\r\\n      <div class=\\\"h5 text-center text-primary my-4\\\">Get report By Indian States</div>\\r\\n      <div class=\\\"row my-5\\\">\\r\\n        <div class=\\\"col-4 text-white\\\">\\r\\n          State:\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\" *ngIf=\\\"stateList\\\">\\r\\n          <ng-autocomplete [data]=\\\"stateList\\\" [searchKeyword]=\\\"'state'\\\" (selected)='selectedState($event)'\\r\\n            [itemTemplate]=\\\"itemTemplate1\\\" name=\\\"\\\" [notFoundTemplate]=\\\"notFoundTemplate1\\\">\\r\\n          </ng-autocomplete>\\r\\n          <ng-template #itemTemplate1 let-item>\\r\\n            <a [innerHTML]=\\\"item.state\\\"></a>\\r\\n          </ng-template>\\r\\n\\r\\n          <ng-template #notFoundTemplate1 let-notFound>\\r\\n            <div [innerHTML]=\\\"notFound\\\"></div>\\r\\n          </ng-template>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngIf=\\\"activeStateStatus\\\" class=\\\"h5 text-center text-primary my-4\\\">Total Count of Covid-19 in\\r\\n        {{activeStateStatus.state}}</div>\\r\\n\\r\\n      <div class=\\\"row my-2\\\" *ngIf=\\\"activeStateStatus\\\">\\r\\n        <div class=\\\"col text-center card bg-primary text-white p-2 mx-1\\\">\\r\\n          <span>Confirmed </span>\\r\\n          <span>{{activeStateStatus.noOfCases}}</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col text-center card bg-success text-white p-2 mx-1\\\">\\r\\n          <span>Recovered </span>\\r\\n          <span>{{activeStateStatus.cured}}</span>\\r\\n        </div>\\r\\n        <div class=\\\"col text-center card bg-danger text-white p-2 mx-1\\\">\\r\\n\\r\\n          <span>Death </span>\\r\\n          <span>{{activeStateStatus.deaths}}</span>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n    </section>\\r\\n\\r\\n\\r\\n    <!-- By City -->\\r\\n\\r\\n    <section *ngIf=\\\"selectedType == 'city'\\\">\\r\\n      <div class=\\\"h5 text-center text-primary my-4\\\">Get report By Indian City</div>\\r\\n      <div class=\\\"row my-5\\\">\\r\\n        <div class=\\\"col-4 text-white\\\">\\r\\n          Select the state:\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\" *ngIf=\\\"statesInDistrict\\\">\\r\\n          <ng-autocomplete [data]=\\\"statesInDistrict\\\" [searchKeyword]=\\\"'state'\\\" (selected)='getCityList($event)'\\r\\n            [itemTemplate]=\\\"itemTemplate1\\\" name=\\\"\\\" [notFoundTemplate]=\\\"notFoundTemplate1\\\">\\r\\n          </ng-autocomplete>\\r\\n          <ng-template #itemTemplate1 let-item>\\r\\n            <a [innerHTML]=\\\"item\\\"></a>\\r\\n          </ng-template>\\r\\n\\r\\n          <ng-template #notFoundTemplate1 let-notFound>\\r\\n            <div [innerHTML]=\\\"notFound\\\"></div>\\r\\n          </ng-template>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row my-5\\\">\\r\\n        <div class=\\\"col-4 text-white\\\">\\r\\n          Select the City:\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\">\\r\\n          <ng-autocomplete [data]=\\\"citiesList\\\" [searchKeyword]=\\\"\\\" (selected)='getStatusOfCity($event)'\\r\\n            [itemTemplate]=\\\"itemTemplate1\\\" name=\\\"\\\" [notFoundTemplate]=\\\"notFoundTemplate1\\\">\\r\\n          </ng-autocomplete>\\r\\n          <ng-template #itemTemplate1 let-item>\\r\\n            <a [innerHTML]=\\\"item\\\"></a>\\r\\n          </ng-template>\\r\\n\\r\\n          <ng-template #notFoundTemplate1 let-notFound>\\r\\n            <div [innerHTML]=\\\"notFound\\\"></div>\\r\\n          </ng-template>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngIf=\\\"activeCityStatus\\\" class=\\\"h5 text-center text-primary my-4\\\">Total Count of Covid-19 in {{selectedCity}}\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row my-2\\\" *ngIf=\\\"activeCityStatus\\\">\\r\\n        <div class=\\\"col text-center card bg-primary text-white p-2 mx-1\\\">\\r\\n          <span>Confirmed </span>\\r\\n          <span>{{activeCityStatus.confirmed}}</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col text-center card bg-warning text-white p-2 mx-1\\\">\\r\\n          <span>Active </span>\\r\\n          <span>{{activeCityStatus.active}}</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col text-center card bg-success text-white p-2 mx-1\\\">\\r\\n          <span>Recovered </span>\\r\\n          <span>{{activeCityStatus.recovered}}</span>\\r\\n        </div>\\r\\n        <div class=\\\"col text-center card bg-danger text-white p-2 mx-1\\\">\\r\\n\\r\\n          <span>Deceased</span>\\r\\n          <span>{{activeCityStatus.deceased}}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngIf=\\\"activeCityStatus\\\" class=\\\"h5 text-center text-primary my-4\\\">Today's Count in {{selectedCity}}</div>\\r\\n      <div class=\\\"row my-2\\\" *ngIf=\\\"activeCityStatus\\\">\\r\\n        <div class=\\\"col text-center card bg-primary text-white p-2 mx-1\\\">\\r\\n          <span>Confirmed </span>\\r\\n          <span>{{activeCityStatus.delta.confirmed}}</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col text-center card bg-success text-white p-2 mx-1\\\">\\r\\n          <span>Recovered </span>\\r\\n          <span>{{activeCityStatus.delta.recovered}}</span>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"col text-center card bg-danger text-white p-2 mx-1\\\">\\r\\n\\r\\n          <span>Deceased</span>\\r\\n          <span>{{activeCityStatus.delta.deceased}}</span>\\r\\n\\r\\n          <span>Number of deceased caused by Covid-19</span>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n    </section>\\r\\n  </div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { CustomHttpService } from '../customhttp-service.service';\r\n\r\n@Component({\r\n  selector: 'app-status-component',\r\n  templateUrl: './status-component.component.html',\r\n  styleUrls: ['./status-component.component.css']\r\n})\r\nexport class StatusComponentComponent implements OnInit {\r\n\r\n  constructor(private httpService : CustomHttpService) { }\r\n  keyword = 'Country';\r\n  backupList :any = [];\r\n  country;\r\n  stateList:any =[];\r\n  activeCountryStatus : any;\r\n  activeStateStatus:any;\r\n  districtList : any;\r\n  statesInDistrict:any = [];\r\n  citiesList: any;\r\n  activeCityStatus : any\r\n  selectedStateForCity : any;\r\n  selectedCity = '';\r\n  selectedType = 'country'\r\n\r\n  countriesList : any = [];\r\n  ngOnInit() {\r\n    this.httpService.getCountrtList().subscribe(res => {\r\n      this.countriesList = res;\r\n    });\r\n\r\n    this.httpService.getStatusOfState().subscribe(res => {\r\n      this.stateList = res;\r\n      console.log(res)\r\n    });\r\n\r\n    this.httpService.getStatusOfCity().subscribe(res => {\r\n      this.districtList = res;\r\n      this.statesInDistrict = Object.keys(this.districtList);\r\n      console.log(res);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  \r\n\r\n  selectCustomer(selected) {\r\n    this.activeCountryStatus = selected;\r\n  }\r\n\r\n  selectedState(event) {\r\n    this.activeStateStatus = event\r\n  }\r\n\r\n  getCityList(state) {\r\n    this.citiesList = Object.keys(this.districtList[state]['districtData']);\r\n    this.selectedStateForCity = state;\r\n  }\r\n\r\n  getStatusOfCity(event) {\r\n    this.selectedCity = event;\r\n    console.log('city',event)\r\n    this.activeCityStatus = this.districtList[this.selectedStateForCity]['districtData'][event];\r\n  }\r\n\r\n  showByType(opt) {\r\n    this.selectedType = opt\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CustomHttpService } from '../customhttp-service.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StatusService {\r\n\r\n  constructor(private httpService : CustomHttpService) { }\r\n}\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, for easier debugging, you can ignore zone related error\r\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\r\n * below file. Don't forget to comment it out in production mode\r\n * because it will have a performance impact when errors are thrown\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}